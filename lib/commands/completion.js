// Generated by CoffeeScript 1.4.0
(function() {
  var dumpScript, env, fs, fullList, optimist, path, utils;

  env = require("../env");

  fs = require("graceful-fs");

  path = require("path");

  utils = require('../util');

  exports.usage = "TAB 自动补全";

  optimist = {
    keys: [],
    aliases: [],
    alias: function(k, a) {
      this.keys.push("-" + k);
      return this.aliases.push("--" + a);
    },
    describe: function() {}
  };

  fullList = fs.readdirSync(__dirname);

  fullList = fullList.concat(env.getExtensions());

  fullList = fullList.map(function(f) {
    if (typeof f === "string") {
      return utils.path.fname(f);
    }
    return f.name;
  });

  fullList = fullList.filter(function(f) {
    return !/^_/.test(f);
  });

  dumpScript = function() {
    var p;
    p = path.resolve(__dirname, "../completion.sh");
    return fs.readFile(p, "utf8", function(er, d) {
      if (er) {
        utils.logger.error(er);
        return null;
      }
      d = d.replace(/^#!.*?\n/, "");
      return console.log(d);
    });
  };

  exports.run = function(options) {
    var args, command, i, line, opts, partialLine, partialWord, partialWords, point, result, w, word, words;
    if (process.platform === "win32") {
      return utils.logger.error("fekit completion 不支持 windows");
    }
    if (void 0 === process.env.COMP_CWORD || void 0 === process.env.COMP_LINE || void 0 === process.env.COMP_POINT) {
      return dumpScript();
    }
    console.error(process.env.COMP_CWORD);
    console.error(process.env.COMP_LINE);
    console.error(process.env.COMP_POINT);
    args = options._.slice(1);
    w = +process.env.COMP_CWORD;
    words = args;
    word = words[w];
    line = process.env.COMP_LINE;
    point = +process.env.COMP_POINT;
    partialLine = line.substr(0, point);
    partialWords = words.slice(0, w);
    partialWord = args[w];
    i = partialWord.length;
    while (partialWord.substr(0, i) !== partialLine.substr(-1 * i) && i > 0) {
      i -= 1;
    }
    partialWord = partialWord.substr(0, i);
    partialWords.push(partialWord);
    opts = {
      words: words,
      w: w,
      word: word,
      line: line,
      lineLength: line.length,
      point: point,
      partialLine: partialLine,
      partialWords: partialWords,
      partialWord: partialWord,
      raw: args
    };
    console.error(opts);
    if (partialWords.length === 2) {
      result = fullList.filter(function(c) {
        return c.indexOf(opts.partialWord) === 0;
      });
      return console.log(result.join("\n"));
    }
    if (partialWords.length > 2) {
      try {
        command = opts.partialWords[1];
        command = require("./" + command);
        command.set_options(optimist);
        optimist.alias('h', 'help');
        if (/^--/.test(opts.partialWord)) {
          result = optimist.aliases;
        } else {
          result = optimist.keys;
        }
        result = result.filter(function(c) {
          return c.indexOf(opts.partialWord) === 0;
        });
        return console.log(result.join("\n"));
      } catch (e) {
        return console.error(e);
      }
    }
  };

}).call(this);
