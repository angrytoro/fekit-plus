// Generated by CoffeeScript 1.4.0
(function() {
  var compiler, md5, minCode, pid, utils;

  compiler = require("../compiler/compiler");

  utils = require("../util");

  md5 = require("MD5");

  minCode = require("./_min_mincode").minCode;

  pid = process.pid;

  process.on('message', function(m) {
    var conf, o, options, opts, parents, srcpath, start, urlconvert, vertype, writer, _done;
    options = m.options;
    conf = utils.config.parse(options.cwd);
    o = conf.get_export_info(m.file);
    srcpath = o.path;
    parents = o.parents;
    opts = o.opts;
    vertype = m.vertype;
    start = new Date();
    utils.logger.log("<" + pid + "> 正在处理 " + srcpath);
    urlconvert = new utils.UrlConvert(srcpath, options.cwd);
    if (opts.no_version) {
      urlconvert.set_no_version();
    }
    urlconvert.set_extname_type(compiler.getContentType(srcpath));
    writer = new utils.file.writer();
    _done = function(err, source) {
      var dest, final_code, md5code;
      if (err) {
        utils.logger.error(err.toString());
        return utils.exit(1);
      }
      final_code = minCode(urlconvert.replaced_extname, source, options, conf.root);
      if (final_code !== null) {
        md5code = md5(final_code);
        dest = urlconvert.to_prd(md5code);
        writer.write(dest, final_code);
        if (vertype === 0 || vertype === 1) {
          writer.write(urlconvert.to_ver(), opts.no_version ? "" : md5code);
        }
        utils.logger.log("<" + pid + "> 已经处理 [" + (new Date().getTime() - start.getTime()) + "ms] " + srcpath + "  ==> " + dest);
        return process.send([md5code, dest]);
      } else {
        utils.logger.error("编译出现错误 " + srcpath);
        return utils.exit(1);
      }
    };
    return compiler.compile(srcpath, {
      dependencies_filepath_list: parents,
      environment: utils.getCurrentEnvironment(options) || 'prd'
    }, _done);
  });

}).call(this);
